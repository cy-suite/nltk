.. Copyright (C) 2001-2012 NLTK Project
.. For license information, see LICENSE.TXT

=======
Metrics
=======

The `nltk.metrics` package provides a variety of *evaluation measures*
which can be used for a wide variety of NLP tasks.

   >>> from nltk.metrics import *
   >>> from nltk.test.doctest_utils import *

------------------
Standard IR Scores
------------------

We can use standard scores from information retrieval to test the
performance of taggers, chunkers, etc.

    >>> reference = 'DET NN VB DET JJ NN NN IN DET NN'.split()
    >>> test    = 'DET VB VB DET NN NN NN IN DET NN'.split()
    >>> float_equal(accuracy(reference, test), 0.8)
    True


The following measures apply to sets:

    >>> reference_set = set(reference)
    >>> test_set = set(test)
    >>> precision(reference_set, test_set)
    1.0
    >>> float_equal(recall(reference_set, test_set), 0.8)
    True
    >>> float_equal(f_measure(reference_set, test_set), 0.88888888888)
    True

Measuring the likelihood of the data, given probability distributions:

    >>> from nltk import FreqDist, MLEProbDist
    >>> pdist1 = MLEProbDist(FreqDist("aldjfalskfjaldsf"))
    >>> pdist2 = MLEProbDist(FreqDist("aldjfalssjjlldss"))
    >>> float_equal(log_likelihood(['a', 'd'], [pdist1, pdist2]), -2.707518749639422)
    True


----------------
Distance Metrics
----------------

String edit distance (Levenshtein):

    >>> edit_distance("rain", "shine")
    3

Other distance measures:

    >>> s1 = set([1,2,3,4])
    >>> s2 = set([3,4,5])
    >>> binary_distance(s1, s2)
    1.0
    >>> float_equal(jaccard_distance(s1, s2), 0.6)
    True
    >>> float_equal(masi_distance(s1, s2), 0.5)
    True

----------------------
Miscellaneous Measures
----------------------

Rank Correlation works with two dictionaries mapping keys to ranks.  The dictionaries should have the same set of keys.

    >>> spearman_correlation({'e':1, 't':2, 'a':3}, {'e':1, 'a':2, 't':3})
    0.5

Windowdiff uses a sliding window in comparing two segmentations of the same input (e.g. tokenizations, chunkings).
Segmentations are represented using strings of zeros and ones.

    >>> s1 = "00000010000000001000000"
    >>> s2 = "00000001000000010000000"
    >>> s3 = "00010000000000000001000"
    >>> windowdiff(s1, s1, 3)
    0
    >>> windowdiff(s1, s2, 3)
    4
    >>> windowdiff(s2, s3, 3)
    16

----------------
Confusion Matrix
----------------

    >>> reference = 'This is the reference data.  Testing 123.  aoaeoeoe'
    >>> test =      'Thos iz_the rifirenci data.  Testeng 123.  aoaeoeoe'
    >>> print ConfusionMatrix(reference, test)
      |   . 1 2 3 T _ a c d e f g h i n o r s t z |
    --+-------------------------------------------+
      |<8>. . . . . 1 . . . . . . . . . . . . . . |
    . | .<2>. . . . . . . . . . . . . . . . . . . |
    1 | . .<1>. . . . . . . . . . . . . . . . . . |
    2 | . . .<1>. . . . . . . . . . . . . . . . . |
    3 | . . . .<1>. . . . . . . . . . . . . . . . |
    T | . . . . .<2>. . . . . . . . . . . . . . . |
    _ | . . . . . .<.>. . . . . . . . . . . . . . |
    a | . . . . . . .<4>. . . . . . . . . . . . . |
    c | . . . . . . . .<1>. . . . . . . . . . . . |
    d | . . . . . . . . .<1>. . . . . . . . . . . |
    e | . . . . . . . . . .<6>. . . 3 . . . . . . |
    f | . . . . . . . . . . .<1>. . . . . . . . . |
    g | . . . . . . . . . . . .<1>. . . . . . . . |
    h | . . . . . . . . . . . . .<2>. . . . . . . |
    i | . . . . . . . . . . 1 . . .<1>. 1 . . . . |
    n | . . . . . . . . . . . . . . .<2>. . . . . |
    o | . . . . . . . . . . . . . . . .<3>. . . . |
    r | . . . . . . . . . . . . . . . . .<2>. . . |
    s | . . . . . . . . . . . . . . . . . .<2>. 1 |
    t | . . . . . . . . . . . . . . . . . . .<3>. |
    z | . . . . . . . . . . . . . . . . . . . .<.>|
    --+-------------------------------------------+
    (row = reference; col = test)
    <BLANKLINE>

    >>> cm = ConfusionMatrix(reference, test)
    >>> print cm.pp(sort_by_count=True)
      |   e a i o s t . T h n r 1 2 3 c d f g _ z |
    --+-------------------------------------------+
      |<8>. . . . . . . . . . . . . . . . . . 1 . |
    e | .<6>. 3 . . . . . . . . . . . . . . . . . |
    a | . .<4>. . . . . . . . . . . . . . . . . . |
    i | . 1 .<1>1 . . . . . . . . . . . . . . . . |
    o | . . . .<3>. . . . . . . . . . . . . . . . |
    s | . . . . .<2>. . . . . . . . . . . . . . 1 |
    t | . . . . . .<3>. . . . . . . . . . . . . . |
    . | . . . . . . .<2>. . . . . . . . . . . . . |
    T | . . . . . . . .<2>. . . . . . . . . . . . |
    h | . . . . . . . . .<2>. . . . . . . . . . . |
    n | . . . . . . . . . .<2>. . . . . . . . . . |
    r | . . . . . . . . . . .<2>. . . . . . . . . |
    1 | . . . . . . . . . . . .<1>. . . . . . . . |
    2 | . . . . . . . . . . . . .<1>. . . . . . . |
    3 | . . . . . . . . . . . . . .<1>. . . . . . |
    c | . . . . . . . . . . . . . . .<1>. . . . . |
    d | . . . . . . . . . . . . . . . .<1>. . . . |
    f | . . . . . . . . . . . . . . . . .<1>. . . |
    g | . . . . . . . . . . . . . . . . . .<1>. . |
    _ | . . . . . . . . . . . . . . . . . . .<.>. |
    z | . . . . . . . . . . . . . . . . . . . .<.>|
    --+-------------------------------------------+
    (row = reference; col = test)
    <BLANKLINE>

    >>> print cm.pp(sort_by_count=True, truncate=10)
      |   e a i o s t . T h |
    --+---------------------+
      |<8>. . . . . . . . . |
    e | .<6>. 3 . . . . . . |
    a | . .<4>. . . . . . . |
    i | . 1 .<1>1 . . . . . |
    o | . . . .<3>. . . . . |
    s | . . . . .<2>. . . . |
    t | . . . . . .<3>. . . |
    . | . . . . . . .<2>. . |
    T | . . . . . . . .<2>. |
    h | . . . . . . . . .<2>|
    --+---------------------+
    (row = reference; col = test)
    <BLANKLINE>

    >>> print cm.pp(sort_by_count=True, truncate=10, values_in_chart=False)
       |                   1 |
       | 1 2 3 4 5 6 7 8 9 0 |
    ---+---------------------+
     1 |<8>. . . . . . . . . |
     2 | .<6>. 3 . . . . . . |
     3 | . .<4>. . . . . . . |
     4 | . 1 .<1>1 . . . . . |
     5 | . . . .<3>. . . . . |
     6 | . . . . .<2>. . . . |
     7 | . . . . . .<3>. . . |
     8 | . . . . . . .<2>. . |
     9 | . . . . . . . .<2>. |
    10 | . . . . . . . . .<2>|
    ---+---------------------+
    (row = reference; col = test)
    Value key:
         1:
         2: e
         3: a
         4: i
         5: o
         6: s
         7: t
         8: .
         9: T
        10: h
    <BLANKLINE>

------------------
MALTEVAL INTERFACE
------------------
First lets import some useful libs
>>> import os
>>> import tempfile
>>> from nltk.metrics.malteval import Malteval
>>> from nltk.parse.dependencygraph import DependencyGraph
>>> from stat import *

Now we will create 2 graphs to work on

>>> dg1 = DependencyGraph("""1  Na      na      prep    prep    loc     4       pobl    _       _
...             2       tym     to      psubst  psubst  sg|loc|n        1       pobj    _       _
...             3       nie     nie     qub     qub     _       4       neg     _       _
...             4       koncza  konczyc fin     fin     pl|ter|imperf   0       pred    _       _
...             5       sie     siÄ™     qub     qub     _       4       refl    _       _
...             6       ich     on      ppron3  ppron3  pl|gen|m1|ter|akc|npraep        7       adj     _       _
...             7       problemy        problem subst   subst   pl|nom|m3       4       subj    _       _
...             8       .       .       interp  interp  _       4       punct   _       _
...             """)
>>> dg2 =DependencyGraph("""1       Zakonczyly      zakonczyc       praet   praet   pl|f|perf       0       pred    _       _
...             2       sie     sie     qub     qub     _       1       refl    _       _
...             3       sukcesem        sukces  subst   subst   sg|inst|m3      1       obl     _       _
...             4       .       .       interp  interp  _       1       punct   _       _
...             """)
>>> dg = [dg1,dg2]

We create Malteval object with look_for_jar set to False in order to make it
ignore the fact that malteval.jar might be not set properly

    >>> jar = '/x/y/z/1221526/y/'
    >>> maltEval = Malteval(jar,look_for_jar=False)
    >>> maltEval._malteval_bin
    '/x/y/z/1221526/y/'

simple setters for gold standard file and file we want to evaluate

    >>> gold_file = '/tmp/me/gold.conll'
    >>> maltEval.set_gold_file(gold_file)
    >>> maltEval._gold_file
    '/tmp/me/gold.conll'
    >>> eval_file = '/tmp/me/test.conll'
    >>> maltEval.set_eval_file(eval_file)
    >>> maltEval._eval_file
    '/tmp/me/test.conll'

we can also change location of ours MaltEval.jar, and see command we get with options so far

    >>> maltEval.set_jar(malteval_jar='MaltEval.jar',check_jar_correctness=False)
    >>> maltEval.get_command()
    'java -jar MaltEval.jar -g /tmp/me/gold.conll -s /tmp/me/test.conll'

We will create gold and eval files from ours graphs
    >>> f=maltEval._to_file(dg,'tst')
    >>> f is None
    False
    >>> os.stat(f.name)[ST_SIZE]
    401L
    >>> maltEval.create_gold_file(dg)
    >>> os.path.exists(os.path.join(tempfile.gettempdir(),'gold_malteval'))
    True
    >>> maltEval.create_eval_file(dg)
    >>> os.path.exists(os.path.join(tempfile.gettempdir(),'eval_malteval'))
    True

    Now we will check if Malteval is configured properly (e.g can be instantiated without
    passing string with jar location to it). such configuration can be achieved by
    setting MALTEVALHOME to malteval.jar

>>> if (Malteval.can_configure_properly()):
...     maltEval = Malteval()
...     maltEval.create_gold_file(dg)
...     maltEval.create_eval_file(dg)
...     res = maltEval.execute()
...     print("\n".join(res.split("\n")[10:14]))
accuracy /    Token
-----------------------
1             Row mean
12            Row count
